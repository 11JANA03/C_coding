//.h
#ifndef DATE_H
#define DATE_H

class Date
{
	public:
	//	Date(); 
		Date(int =2020,int =2,int =28);
		Date(Date &);//拷贝构造函数
		~Date();//析构函数 
        
		void setDate(int y,int m,int d);//有效值的验证
		inline int getYear() const;//常成员函数，声明与实现均要加const 
		inline int getMonth() const;
		inline int getDay() const;
		
		void displayDate() const;//常成员函数 
		 
		void addOneDay();//加一天
		bool isLeapYear();//判断是否为闰年 
		
	private:
		int year,month,day;	
};

#endif

//.cpp
#include <cmath>
#include <iostream>
using namespace std;

#include "Date.h"

Date::Date(int y,int m,int d)
{
	year=y;
	month=m;
	day=d;
	setDate(y,m,d);
	cout<<"constructor runs:"<<year<<"-"<<month<<"-"<<day<<endl;
}

Date::Date(Date &p)
{
    cout<<endl<<"copy constructor:"<<year<<"-"<<month<<"-"<<day<<endl;
    year=p.year;
    month=p.month;
    day=p.day;
}

Date::~Date()
{
	cout<<endl<<"destructor runs:"<<year<<"-"<<month<<"-"<<day;
}

void Date::setDate(int y,int m,int d)
{
	if((m==1||m==3||m==5||m==7||m==8||m==10||m==12)&&(d>=1&&d<=31))
	cout<<"合法日期"<<endl;
	else if((m==4||m==6||m==9||m==11)&&(d>=1&&d<=31))
	cout<<"合法日期"<<endl;
	else if(m==2)
	{
		if(isLeapYear()&&(d>=1&&d<=29))
		cout<<"合法日期"<<endl;
		else if(d>=1&&d<=28)
		cout<<"合法日期"<<endl;
	}
	else 
	{
		cout<<"非法日期"<<endl; 
	}
}

int Date::getYear() const
{
	return year;
}

int Date::getMonth() const
{
	return month;
}

int Date::getDay() const
{
	return day;
}

void Date::displayDate() const
{
	cout<<getYear()<<"-"<<getMonth()<<"-"<<getDay();
}

void Date::addOneDay()
{
	int tempd;
	tempd=day+1;
	if(tempd<28)
		day=tempd;
	else if(isLeapYear()&&(day>=1&&day<=29))
	{
		day=tempd;
	}
	else if(month==2)
	{
		month=month+1;
		day=1;
	}
	else if(month==4||month==6||month==9||month==11)
	{
		if(tempd==30)
		{
			month=month+1;
			day=1;
		}
		else
		day=tempd;
	}
	else
	{
		if(tempd==31)
		{
			month=month+1;
			day=1;
			if(month==13)
			{
				year=year+1;
				month=1;
			}
		}
	}
}


bool Date::isLeapYear()
{
	
	if((year%400==0)||(year%4==0&&year%100!=0))
    {
	//	cout<<"是闰年"<<endl; 
		return true; 
	}
	else
	{
	//	cout<<"不是闰年"<<endl;
		return false;
	}
}

//main
#include <iostream>
using namespace std;

#include "Date.h"

Date date2(1999,2,1);//全局对象 
	
int main(int argc, char** argv) {
	static Date date1;//静态局部对象 
	const Date date3(1900,8,1);//常对象
	Date date4(date1);//局部对象 
//	Date date4=date1;
	cout<<endl;
	date1.displayDate();
	cout<<endl<<"isLeapYear()=="<<date1.isLeapYear()<<"(1为闰年，0为平年)"<<endl;
	cout<<"加一天日期变为：";
	date1.addOneDay();
	date1.displayDate(); 
	cout<<endl;
	return 0;
}
